# Orchestrates the database, API, and dashboard services for local development
version: "3.9"

services:
  # PostgreSQL instance for persisting climate-related data
  postgres:
    image: postgres:16
    container_name: climate-postgres
    restart: unless-stopped
    env_file:
      - .env
    environment:
      POSTGRES_DB: 
      POSTGRES_USER: 
      POSTGRES_PASSWORD: 
    ports:
      - "5432:5432"  # expose the default PostgreSQL port to the host
    volumes:
      - postgres-data:/var/lib/postgresql/data  # persist database state across restarts
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U  -d "]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # FastAPI backend serving the climate API
  fastapi:
    build:
      context: ./fastapi
      dockerfile: Dockerfile
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy  # wait for Postgres to be ready before starting
    ports:
      - "8000:8000"  # bind FastAPI service to localhost:8000
    volumes:
      - ./fastapi:/app  # enable live code reloads during development
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000
    restart: unless-stopped

  # Streamlit dashboard consuming data from the FastAPI service
  streamlit:
    build:
      context: ./streamlit
      dockerfile: Dockerfile
    env_file:
      - .env
    depends_on:
      - fastapi  # require the API to be reachable before booting Streamlit
    ports:
      - "8501:8501"  # expose the dashboard on localhost:8501
    volumes:
      - ./streamlit:/app  # reflect local code edits in the container
    command: streamlit run app.py --server.port 8501 --server.address 0.0.0.0
    restart: unless-stopped

volumes:
  postgres-data:
